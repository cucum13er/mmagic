(mmagic) rui@rui-Alienware-Aurora-Ryzen-Edition:~/Rui_SR/mmagic_Rui$ ./tools/dist_test.sh configs/restormer/restormer_official_dfwb-color-sigma15.py https://download.openmmlab.com/mmediting/restormer/restormer_official_dfwb-color-sigma15-012ceb71.pth 1
/home/rui/anaconda3/envs/mmagic/lib/python3.10/site-packages/torch/distributed/launch.py:180: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
/home/rui/anaconda3/envs/mmagic/lib/python3.10/site-packages/mmengine/utils/dl_utils/setup_env.py:46: UserWarning: Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/rui/anaconda3/envs/mmagic/lib/python3.10/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
08/03 14:16:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.11 (main, Apr 20 2023, 19:02:41) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1402528300
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /home/rui/anaconda3/envs/mmagic
    NVCC: Cuda compilation tools, release 12.2, V12.2.91
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 4}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 1
------------------------------------------------------------

08/03 14:16:36 - mmengine - INFO - Config:
default_scope = 'mmagic'
save_dir = './work_dirs/'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook',
        interval=5000,
        out_dir='./work_dirs',
        by_epoch=False,
        max_keep_ckpts=10,
        save_best='PSNR',
        rule='greater'),
    sampler_seed=dict(type='DistSamplerSeedHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=4),
    dist_cfg=dict(backend='nccl'))
log_level = 'INFO'
log_processor = dict(type='LogProcessor', window_size=100, by_epoch=False)
load_from = 'https://download.openmmlab.com/mmediting/restormer/restormer_official_dfwb-color-sigma15-012ceb71.pth'
resume = False
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='ConcatImageVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    fn_key='gt_path',
    img_keys=['gt_img', 'input', 'pred_img'],
    bgr2rgb=True)
custom_hooks = [dict(type='BasicVisualizationHook', interval=1)]
sigma = 15
test_pipeline = [
    dict(
        type='LoadImageFromFile',
        key='img',
        color_type='color',
        channel_order='rgb',
        imdecode_backend='cv2'),
    dict(
        type='LoadImageFromFile',
        key='gt',
        color_type='color',
        channel_order='rgb',
        imdecode_backend='cv2'),
    dict(
        type='RandomNoise',
        params=dict(
            noise_type=['gaussian'],
            noise_prob=[1],
            gaussian_sigma=[3825, 3825],
            gaussian_gray_noise_prob=0),
        keys=['img']),
    dict(type='PackInputs')
]
data_root = 'data/Urban100/X4/gt'
urban100_dataloader = dict(
    num_workers=4,
    persistent_workers=False,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BasicImageDataset',
        metainfo=dict(dataset_type='Urban100', task_name='denoising'),
        data_root='data/Urban100/X4/gt',
        data_prefix=dict(img='', gt=''),
        pipeline=[
            dict(
                type='LoadImageFromFile',
                key='img',
                color_type='color',
                channel_order='rgb',
                imdecode_backend='cv2'),
            dict(
                type='LoadImageFromFile',
                key='gt',
                color_type='color',
                channel_order='rgb',
                imdecode_backend='cv2'),
            dict(
                type='RandomNoise',
                params=dict(
                    noise_type=['gaussian'],
                    noise_prob=[1],
                    gaussian_sigma=[15, 15],
                    gaussian_gray_noise_prob=0),
                keys=['img']),
            dict(type='PackInputs')
        ]))
urban100_evaluator = [
    dict(type='PSNR', prefix=''),
    dict(type='SSIM', prefix='')
]
test_cfg = dict(type='MultiTestLoop')
test_dataloader = [
    dict(
        num_workers=4,
        persistent_workers=False,
        drop_last=False,
        sampler=dict(type='DefaultSampler', shuffle=False),
        dataset=dict(
            type='BasicImageDataset',
            metainfo=dict(dataset_type='Urban100', task_name='denoising'),
            data_root='data/Urban100/X4/gt',
            data_prefix=dict(img='', gt=''),
            pipeline=[
                dict(
                    type='LoadImageFromFile',
                    key='img',
                    color_type='color',
                    channel_order='rgb',
                    imdecode_backend='cv2'),
                dict(
                    type='LoadImageFromFile',
                    key='gt',
                    color_type='color',
                    channel_order='rgb',
                    imdecode_backend='cv2'),
                dict(
                    type='RandomNoise',
                    params=dict(
                        noise_type=['gaussian'],
                        noise_prob=[1],
                        gaussian_sigma=[3825, 3825],
                        gaussian_gray_noise_prob=0),
                    keys=['img']),
                dict(type='PackInputs')
            ]))
]
test_evaluator = [[{
    'type': 'PSNR',
    'prefix': ''
}, {
    'type': 'SSIM',
    'prefix': ''
}]]
experiment_name = 'restormer_official_dfwb_color_sigma15'
work_dir = './work_dirs/restormer_official_dfwb_color_sigma15'
dataloader = dict(
    num_workers=4,
    persistent_workers=False,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BasicImageDataset',
        metainfo=dict(dataset_type='Urban100', task_name='denoising'),
        data_root='data/Urban100/X4/gt',
        data_prefix=dict(img='', gt=''),
        pipeline=[
            dict(
                type='LoadImageFromFile',
                key='img',
                color_type='color',
                channel_order='rgb',
                imdecode_backend='cv2'),
            dict(
                type='LoadImageFromFile',
                key='gt',
                color_type='color',
                channel_order='rgb',
                imdecode_backend='cv2'),
            dict(
                type='RandomNoise',
                params=dict(
                    noise_type=['gaussian'],
                    noise_prob=[1],
                    gaussian_sigma=[3825, 3825],
                    gaussian_gray_noise_prob=0),
                keys=['img']),
            dict(type='PackInputs')
        ]))
model = dict(
    type='BaseEditModel',
    generator=dict(
        type='Restormer',
        inp_channels=3,
        out_channels=3,
        dim=48,
        num_blocks=[4, 6, 6, 8],
        num_refinement_blocks=4,
        heads=[1, 2, 4, 8],
        ffn_expansion_factor=2.66,
        bias=False,
        LayerNorm_type='BiasFree',
        dual_pixel_task=False),
    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean'),
    data_preprocessor=dict(
        type='DataPreprocessor',
        mean=[0.0, 0.0, 0.0],
        std=[255.0, 255.0, 255.0]))
launcher = 'pytorch'

08/03 14:16:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) BasicVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) BasicVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) BasicVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
08/03 14:16:38 - mmengine - INFO - Working directory: ./work_dirs/restormer_official_dfwb_color_sigma15
08/03 14:16:38 - mmengine - INFO - Log directory: /home/rui/Rui_SR/mmagic_Rui/work_dirs/restormer_official_dfwb_color_sigma15/20230803_141636
08/03 14:16:38 - mmengine - WARNING - Urban100 is not a meta file, simply parsed as meta information
08/03 14:16:38 - mmengine - WARNING - denoising is not a meta file, simply parsed as meta information
08/03 14:16:38 - mmengine - WARNING - The prefix is not set in metric class PSNR.
08/03 14:16:38 - mmengine - WARNING - The prefix is not set in metric class SSIM.
Loads checkpoint by http backend from path: https://download.openmmlab.com/mmediting/restormer/restormer_official_dfwb-color-sigma15-012ceb71.pth
08/03 14:16:38 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmediting/restormer/restormer_official_dfwb-color-sigma15-012ceb71.pth
> /home/rui/Rui_SR/mmagic_Rui/mmagic/models/data_preprocessors/data_preprocessor.py(693)destruct()
-> _batch_outputs = self._destruct_norm_and_conversion(
(Pdb) c
> /home/rui/Rui_SR/mmagic_Rui/mmagic/models/data_preprocessors/data_preprocessor.py(693)destruct()
-> _batch_outputs = self._destruct_norm_and_conversion(
(Pdb) c
> /home/rui/Rui_SR/mmagic_Rui/mmagic/models/base_models/base_edit_model.py(123)forward()
-> return predictions
(Pdb) predictions
[<DataSample(

    META INFORMATION
    img_channel_order: 'rgb'
    gt_channel_order: 'rgb'
    gt_img_mean: tensor([[[0.]],
        
                [[0.]],
        
                [[0.]]], device='cuda:0')
    gt_img_output_channel_order: 'BGR'
    sample_idx: 0
    ori_img_shape: (732, 1024, 3)
    gt_img_enable_norm: True
    gt_path: 'data/Urban100/X4/gt/img_078_SRF_4_HR.png'
    img_path: 'data/Urban100/X4/gt/img_078_SRF_4_HR.png'
    img_color_type: 'color'
    gt_color_type: 'color'
    padding_size: tensor([0., 0., 0.])
    gt_img_std: tensor([[[255.]],
        
                [[255.]],
        
                [[255.]]], device='cuda:0')
    img_output_channel_order: 'rgb'
    ori_gt_shape: (732, 1024, 3)

    DATA FIELDS
    output: <DataSample(
        
            META INFORMATION
        
            DATA FIELDS
            pred_img: tensor([[[255.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                         [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                         [  0.0000,   0.0000,   0.0000,  ..., 255.0000,  31.5078,  21.3407],
                         ...,
                         [  0.0000, 255.0000, 255.0000,  ...,   0.0000, 255.0000, 255.0000],
                         [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                         [  0.0000, 255.0000,   0.0000,  ..., 255.0000, 140.7503,   0.0000]],
                
                        [[  0.0000,   0.0000,   0.0000,  ..., 255.0000, 177.6217,   0.0000],
                         [  0.0000, 100.1005,   0.0000,  ...,  10.6542, 255.0000, 255.0000],
                         [  0.0000,   0.0000, 255.0000,  ..., 255.0000,   0.0000, 255.0000],
                         ...,
                         [255.0000, 255.0000,   0.0000,  ...,   0.0000, 255.0000,  76.7808],
                         [  0.0000, 255.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                         [156.7924, 255.0000,   0.0000,  ..., 109.6238,   0.0000,   0.0000]],
                
                        [[255.0000,   0.0000,   0.0000,  ..., 255.0000, 255.0000,   0.0000],
                         [255.0000,   0.0000,   0.0000,  ...,   0.0000, 255.0000, 255.0000],
                         [ 47.3625,   0.0000,   0.0000,  ...,  16.5976,   0.0000, 255.0000],
                         ...,
                         [255.0000,  25.8561,   0.0000,  ...,   0.0000,  15.5108, 255.0000],
                         [255.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                         [  0.0000, 255.0000,   0.0000,  ..., 175.1091,   0.0000,   0.0000]]])
        ) at 0x7fa500930940>
    input: tensor([[[255.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                 [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                 [  0.0000, 255.0000,   0.0000,  ..., 255.0000, 255.0000,   0.0000],
                 ...,
                 [  0.0000, 255.0000,   0.0000,  ...,   0.0000, 255.0000,  93.2781],
                 [  0.0000,   0.0000,   0.0000,  ...,   0.0000,  25.3648, 255.0000],
                 [  0.0000, 255.0000,   0.0000,  ..., 255.0000, 255.0000,   0.0000]],
        
                [[  0.0000,   0.0000,   0.0000,  ..., 255.0000,   0.0000,   0.0000],
                 [  0.0000, 255.0000,   0.0000,  ...,   0.0000, 255.0000, 255.0000],
                 [  0.0000,   0.0000, 255.0000,  ...,   0.0000,   0.0000, 255.0000],
                 ...,
                 [255.0000, 255.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
                 [  0.0000, 255.0000,   0.0000,  ..., 255.0000,   0.0000,   0.0000],
                 [255.0000, 255.0000, 255.0000,  ...,   0.0000,   0.0000, 255.0000]],
        
                [[255.0000,   0.0000,   0.0000,  ..., 255.0000, 255.0000,   0.0000],
                 [255.0000, 255.0000, 255.0000,  ...,   0.0000, 255.0000,   0.0000],
                 [138.4218,   0.0000, 255.0000,  ..., 255.0000,   0.0000, 255.0000],
                 ...,
                 [255.0000,   0.0000,   0.0000,  ...,   0.0000, 255.0000, 255.0000],
                 [255.0000,   0.0000, 157.2109,  ...,   0.0000,   0.0000,   0.0000],
                 [  0.0000, 255.0000,   0.0000,  ..., 255.0000, 219.5935,   0.0000]]],
               device='cuda:0')
    gt_img: tensor([[[  8,  11,  17,  ...,   0,  16,  39],
                 [  9,  20,  29,  ...,  42,  56,  63],
                 [ 19,  31,  36,  ...,  67,  70,  68],
                 ...,
                 [138, 138, 136,  ...,  57,  60,  61],
                 [147, 136, 127,  ...,  58,  58,  61],
                 [145, 135, 127,  ...,  55,  53,  57]],
        
                [[  0,   1,   3,  ...,   4,  40,  74],
                 [  0,   9,  16,  ...,  55,  82,  98],
                 [  5,  19,  25,  ...,  91,  99, 101],
                 ...,
                 [172, 172, 170,  ...,  11,  12,  13],
                 [184, 174, 164,  ...,  12,  12,  13],
                 [184, 175, 165,  ...,  12,   7,  10]],
        
                [[  2,   1,   0,  ...,  13,  46,  77],
                 [  0,   5,   8,  ...,  63,  88, 102],
                 [  0,   9,  11,  ...,  97, 106, 110],
                 ...,
                 [165, 166, 169,  ...,   4,   6,   7],
                 [176, 168, 162,  ...,   5,   5,   7],
                 [176, 170, 165,  ...,   3,   0,   2]]], device='cuda:0',
               dtype=torch.uint8)
) at 0x7fa500930490>]

